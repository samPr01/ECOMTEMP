{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\CascadeProjects\\\\SS-Stores\\\\client\\\\src\\\\components\\\\auth\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\n/**\n * Protected Route Component\n * Redirects unauthenticated users to login page\n * Preserves the intended destination for post-login redirect\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requiredRole = null\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    user,\n    loading\n  } = useAuth();\n  const location = useLocation();\n\n  // Show loading spinner while checking authentication\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"protected-route-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Verifying authentication...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Check role-based access if required\n  if (requiredRole && (user === null || user === void 0 ? void 0 : user.role) !== requiredRole) {\n    // Redirect to unauthorized page or dashboard based on role\n    const redirectPath = (user === null || user === void 0 ? void 0 : user.role) === 'admin' ? '/admin' : '/dashboard';\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: redirectPath,\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render children if authenticated and authorized\n  return children;\n};\n\n/**\n * Admin Route Component\n * Specifically for admin-only routes\n */\n_s(ProtectedRoute, \"zEGFxQ50Ze7Wo58QBItO0ZM7uxw=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport const AdminRoute = ({\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n    requiredRole: \"admin\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * Customer Route Component\n * For customer-specific routes (optional, defaults to any authenticated user)\n */\n_c2 = AdminRoute;\nexport const CustomerRoute = ({\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_c3 = CustomerRoute;\nexport default ProtectedRoute;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"AdminRoute\");\n$RefreshReg$(_c3, \"CustomerRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","requiredRole","_s","isAuthenticated","user","loading","location","className","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","role","redirectPath","_c","AdminRoute","_c2","CustomerRoute","_c3","$RefreshReg$"],"sources":["C:/Users/dell/CascadeProjects/SS-Stores/client/src/components/auth/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\n/**\n * Protected Route Component\n * Redirects unauthenticated users to login page\n * Preserves the intended destination for post-login redirect\n */\nconst ProtectedRoute = ({ children, requiredRole = null }) => {\n  const { isAuthenticated, user, loading } = useAuth();\n  const location = useLocation();\n\n  // Show loading spinner while checking authentication\n  if (loading) {\n    return (\n      <div className=\"protected-route-loading\">\n        <div className=\"spinner-container\">\n          <div className=\"spinner\"></div>\n          <p>Verifying authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <Navigate \n        to=\"/login\" \n        state={{ from: location }} \n        replace \n      />\n    );\n  }\n\n  // Check role-based access if required\n  if (requiredRole && user?.role !== requiredRole) {\n    // Redirect to unauthorized page or dashboard based on role\n    const redirectPath = user?.role === 'admin' ? '/admin' : '/dashboard';\n    return (\n      <Navigate \n        to={redirectPath} \n        replace \n      />\n    );\n  }\n\n  // Render children if authenticated and authorized\n  return children;\n};\n\n/**\n * Admin Route Component\n * Specifically for admin-only routes\n */\nexport const AdminRoute = ({ children }) => {\n  return (\n    <ProtectedRoute requiredRole=\"admin\">\n      {children}\n    </ProtectedRoute>\n  );\n};\n\n/**\n * Customer Route Component\n * For customer-specific routes (optional, defaults to any authenticated user)\n */\nexport const CustomerRoute = ({ children }) => {\n  return (\n    <ProtectedRoute>\n      {children}\n    </ProtectedRoute>\n  );\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,OAAO,QAAQ,2BAA2B;;AAEnD;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,YAAY,GAAG;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAM;IAAEC,eAAe;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGT,OAAO,CAAC,CAAC;EACpD,MAAMU,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIU,OAAO,EAAE;IACX,oBACEP,OAAA;MAAKS,SAAS,EAAC,yBAAyB;MAAAP,QAAA,eACtCF,OAAA;QAAKS,SAAS,EAAC,mBAAmB;QAAAP,QAAA,gBAChCF,OAAA;UAAKS,SAAS,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC/Bb,OAAA;UAAAE,QAAA,EAAG;QAA2B;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;;EAEA;EACA,IAAI,CAACR,eAAe,EAAE;IACpB,oBACEL,OAAA,CAACJ,QAAQ;MACPkB,EAAE,EAAC,QAAQ;MACXC,KAAK,EAAE;QAAEC,IAAI,EAAER;MAAS,CAAE;MAC1BS,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAEN;;EAEA;EACA,IAAIV,YAAY,IAAI,CAAAG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEY,IAAI,MAAKf,YAAY,EAAE;IAC/C;IACA,MAAMgB,YAAY,GAAG,CAAAb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEY,IAAI,MAAK,OAAO,GAAG,QAAQ,GAAG,YAAY;IACrE,oBACElB,OAAA,CAACJ,QAAQ;MACPkB,EAAE,EAAEK,YAAa;MACjBF,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAEN;;EAEA;EACA,OAAOX,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AAHAE,EAAA,CA3CMH,cAAc;EAAA,QACyBH,OAAO,EACjCD,WAAW;AAAA;AAAAuB,EAAA,GAFxBnB,cAAc;AA+CpB,OAAO,MAAMoB,UAAU,GAAGA,CAAC;EAAEnB;AAAS,CAAC,KAAK;EAC1C,oBACEF,OAAA,CAACC,cAAc;IAACE,YAAY,EAAC,OAAO;IAAAD,QAAA,EACjCA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAErB,CAAC;;AAED;AACA;AACA;AACA;AAHAS,GAAA,GARaD,UAAU;AAYvB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAErB;AAAS,CAAC,KAAK;EAC7C,oBACEF,OAAA,CAACC,cAAc;IAAAC,QAAA,EACZA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAErB,CAAC;AAACW,GAAA,GANWD,aAAa;AAQ1B,eAAetB,cAAc;AAAC,IAAAmB,EAAA,EAAAE,GAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}